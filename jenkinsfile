pipeline{
    agent { docker { image 'node:latest' } }
    // tools {nodejs 'node-18.12.0'}
    environment {
        docdockerImage = ''
        storydockerImage = ''
        //once you sign up for Docker hub, use that user_id here
        registry = "yksandeep"
        DOCNAME = "react-lib-doc"
        STORYNAME = "react-lib-story"
        VERSION = "1.0.${env.BUILD_ID}"
        DOCIMAGE = "${DOCNAME}:${VERSION}"
        STORYIMAGE = "${STORYNAME}:${VERSION}"
        userAborted  = false
        HOME = "."
        //- update your credentials ID after creating credentials for connecting to Docker Hub
        registryCredential = 'docker_id'
    }
    stages{
        stage("Cloning"){
            steps{
                // CLONE
                echo "Cloning from git..."
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    extensions: [],
                    userRemoteConfigs: [
                        [
                            credentialsId: 'github_id',
                            url: 'https://github.com/yksandeep/react-lib.git'
                        ]
                    ]
                ])
            }
        }
        stage("Testing"){
            steps{
                // TESTING
                echo "Testing..."
            }
        }
        stage("Building for stageing"){
            steps{
                //  BUILDING
                echo "Building Image ${DOCNAME}:${VERSION} and ${STORYNAME}:${VERSION} for staging ..."
                sh "yarn install"
                sh "yarn build && yarn build:doc && yarn build-storybook"
                script{
                    docdockerImage = docker.build("${registry}/${DOCIMAGE}","-f jsdocProdDockerfile .")
                    storydockerImage = docker.build("${registry}/${STORYIMAGE}","-f storyProdDockerfile .")
                }
            }
        }
        stage("Pushing in staging"){
            steps{
                //  PUSHING
                echo "Pushing Image ${DOCNAME}:${VERSION} and ${STORYNAME}:${VERSION} in staging..."
                script {
                    docker.withRegistry( '', registryCredential ) {
                        docdockerImage.push()
                        storydockerImage.push()
                    }
                }
            }
        }
        stage("Building for prod"){
            steps{
                echo "Docker build ${DOCNAME}:latest and ${STORYNAME}:latest ..."
                //  BUILDING
                script {
                    docdockerImage = docker.build("${registry}/${DOCNAME}:latest","-f jsdocProdDockerfile .")
                    storydockerImage = docker.build("${registry}/${STORYNAME}:latest","-f storyProdDockerfile .")
                }
            }
        }
        stage("Waiting for approval to push in Prod"){
            steps{
                emailext (body: "Please go to http://localhost:8081/job/${env.JOB_NAME} input to approve deployment to production",
                mimeType: "text/html",
                subject: "Aproval to push to the prodcution",
                from: "pkytsky@gmail.com",
                to: "yksandeep08+jenkins@gmail.com",
                recipientProviders: [
                    [$class: 'DevelopersRecipientProvider'],
                    [$class: 'CulpritsRecipientProvider']
                ])
                input(
                    message:"Should we continue ?",
                    ok:"Yes we should" 
                )
            }
        }
        stage("Pushing in prod"){
            // PUSHING
            steps{
                script {
                    docker.withRegistry( '', registryCredential ) {
                        docdockerImage.push()
                        storydockerImage.push()
                    }
                }
            }
        }
    }
}




